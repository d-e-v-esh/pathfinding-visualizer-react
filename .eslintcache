[{"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\index.js":"1","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\reportWebVitals.js":"2","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\App.js":"3","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Board.js":"4","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Node.jsx":"5","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\configureStore.js":"6","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Node.js":"7","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\utils\\nodeHelpers.js":"8","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstras(Basic).js":"9","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Controls.js":"10","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstra.js":"11"},{"size":611,"mtime":1608817456167,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":177,"mtime":1609770166092,"results":"15","hashOfConfig":"13"},{"size":1747,"mtime":1610124363265,"results":"16","hashOfConfig":"13"},{"size":2405,"mtime":1610124276418,"results":"17","hashOfConfig":"13"},{"size":428,"mtime":1609844175785,"results":"18","hashOfConfig":"13"},{"size":3057,"mtime":1610124054639,"results":"19","hashOfConfig":"13"},{"size":1476,"mtime":1608903362354,"results":"20","hashOfConfig":"13"},{"size":2402,"mtime":1609689082947,"results":"21","hashOfConfig":"13"},{"size":505,"mtime":1609828788829,"results":"22","hashOfConfig":"13"},{"size":3662,"mtime":1610004916367,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fakngb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"41"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"26"},"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\index.js",[],["49","50"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\reportWebVitals.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\App.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Board.js",["51","52","53","54","55","56"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Node.jsx",["57","58","59","60","61","62"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\configureStore.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Node.js",["63"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\utils\\nodeHelpers.js",[],["64","65"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstras(Basic).js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Controls.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstra.js",["66","67"],"import { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// export default function Dijkstra(nodes, startNode, endNode) {\r\n//   return basicAStar(nodes, startNode, endNode, dijkstraHeuristic);\r\n// }\r\n\r\nexport const Dijkstra = (\r\n  grid,\r\n  START_NODE_ROW,\r\n  START_NODE_COL,\r\n  FINISH_NODE_ROW,\r\n  FINISH_NODE_COL\r\n) => {\r\n  // console.log(grid);\r\n  const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n  const endNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n\r\n  // console.log(startNode, endNode);\r\n\r\n  const neighbors = (node1, node2) => {\r\n    const xDistance = Math.abs(node1.row - node2.row);\r\n    const yDistance = Math.abs(node1.col - node2.col);\r\n    return xDistance + yDistance === 1;\r\n  };\r\n\r\n  const dijkstraHeuristic = {\r\n    comparer: (a, b) => a.distanceFromStart - b.distanceFromStart,\r\n    addHeuristics: (grid, startNode, endNode) =>\r\n      grid.map((girdNode) => ({\r\n        ...girdNode,\r\n        distanceFromStart: girdNode.isStart ? 0 : Infinity, // either 0 or infinity\r\n        previousNode: null,\r\n        // console.log()\r\n      })),\r\n    map: (currentNode, testedNode) => {\r\n      const calculatedDistance = currentNode.distanceFromStart + 1;\r\n\r\n      // console.log(currentNode);\r\n      return neighbors(currentNode, testedNode)\r\n        ? {\r\n            ...testedNode,\r\n            distanceFromStart: Math.min(\r\n              testedNode.distanceFromStart,\r\n              calculatedDistance\r\n            ),\r\n            previousNode:\r\n              testedNode.distanceFromStart > calculatedDistance\r\n                ? currentNode\r\n                : testedNode.previousNode,\r\n          }\r\n        : testedNode;\r\n    },\r\n    endCondition: (currentNode) => currentNode.distanceFromStart === Infinity,\r\n  };\r\n\r\n  const basicAStar = (grid, startNode, endNode, heuristic) => {\r\n    const visited = [];\r\n\r\n    const flatNodes = grid.flat().filter((gridNode) => !gridNode.isWall);\r\n    // console.log(flatNodes);\r\n    let unvisited = heuristic.addHeuristics(flatNodes, startNode, endNode);\r\n\r\n    for (let i = 0; unvisited.length !== 0; i++) {\r\n      unvisited.sort(heuristic.comparer);\r\n      const currentNode = unvisited[0];\r\n\r\n      // if lowest distance from start node in unvisited array equals Infinity\r\n      // it means there is no path from start to end, so we can end searching\r\n      if (heuristic.endCondition(currentNode)) {\r\n        return { visited, result: null };\r\n      }\r\n\r\n      unvisited.shift(); //remove current node\r\n      unvisited = unvisited.map((node) => heuristic.map(currentNode, node));\r\n\r\n      visited.push({ ...currentNode, visitedIndex: i });\r\n      if (currentNode.isEnd) {\r\n        break;\r\n      }\r\n    }\r\n\r\n    const result = [];\r\n    const endNodeData = visited.find((n) => n.isEnd);\r\n    console.log(endNodeData);\r\n    // endNodeData contains an object that contains it's previous node. That previous node contains it's previous node and soo on until it gets to the startNode\r\n\r\n    for (\r\n      let node = endNodeData.previousNode, i = 0;\r\n      node.isStart !== true; // we will continue the loop until there is a node.isStart that is true\r\n      node = node.previousNode, i++\r\n    ) {\r\n      // If there no more nodes left then return visited and result otherwise keep pushing the nodes in the result array\r\n      //--------------------------------------\r\n\r\n      result.push({ ...node, visitedIndex: i });\r\n      // console.log(result);\r\n      if (!node) {\r\n        return { visited, result };\r\n      }\r\n    }\r\n\r\n    console.log(result);\r\n\r\n    //\r\n    return { visited, result };\r\n  };\r\n\r\n  // Main Return Statement\r\n  return basicAStar(grid, startNode, endNode, dijkstraHeuristic);\r\n};\r\n",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":3,"column":17,"nodeType":"74","messageId":"75","endLine":3,"endColumn":26},{"ruleId":"72","severity":1,"message":"76","line":8,"column":10,"nodeType":"74","messageId":"75","endLine":8,"endColumn":19},{"ruleId":"72","severity":1,"message":"77","line":8,"column":31,"nodeType":"74","messageId":"75","endLine":8,"endColumn":41},{"ruleId":"72","severity":1,"message":"78","line":22,"column":21,"nodeType":"74","messageId":"75","endLine":22,"endColumn":33},{"ruleId":"72","severity":1,"message":"79","line":24,"column":11,"nodeType":"74","messageId":"75","endLine":24,"endColumn":25},{"ruleId":"72","severity":1,"message":"80","line":27,"column":13,"nodeType":"74","messageId":"75","endLine":27,"endColumn":20},{"ruleId":"72","severity":1,"message":"81","line":11,"column":17,"nodeType":"74","messageId":"75","endLine":11,"endColumn":25},{"ruleId":"72","severity":1,"message":"73","line":11,"column":27,"nodeType":"74","messageId":"75","endLine":11,"endColumn":36},{"ruleId":"72","severity":1,"message":"82","line":21,"column":3,"nodeType":"74","messageId":"75","endLine":21,"endColumn":11},{"ruleId":"72","severity":1,"message":"83","line":22,"column":3,"nodeType":"74","messageId":"75","endLine":22,"endColumn":12},{"ruleId":"72","severity":1,"message":"77","line":23,"column":3,"nodeType":"74","messageId":"75","endLine":23,"endColumn":13},{"ruleId":"72","severity":1,"message":"84","line":31,"column":7,"nodeType":"74","messageId":"75","endLine":31,"endColumn":26},{"ruleId":"72","severity":1,"message":"85","line":6,"column":10,"nodeType":"74","messageId":"75","endLine":6,"endColumn":25},{"ruleId":"68","replacedBy":"86"},{"ruleId":"70","replacedBy":"87"},{"ruleId":"72","severity":1,"message":"88","line":1,"column":10,"nodeType":"74","messageId":"75","endLine":1,"endColumn":21},{"ruleId":"72","severity":1,"message":"89","line":1,"column":23,"nodeType":"74","messageId":"75","endLine":1,"endColumn":34},"no-native-reassign",["90"],"no-negated-in-lhs",["91"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'visitNode' is defined but never used.","'updateGrid' is defined but never used.","'setLocalGrid' is assigned a value but never used.","'isMousePressed' is assigned a value but never used.","'visited' is assigned a value but never used.","'useState' is defined but never used.","'makeWall' is defined but never used.","'breakWall' is defined but never used.","'nodeWallClassChange' is assigned a value but never used.","'combineReducers' is defined but never used.",["90"],["91"],"'useSelector' is defined but never used.","'useDispatch' is defined but never used.","no-global-assign","no-unsafe-negation"]