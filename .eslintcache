[{"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\index.js":"1","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\reportWebVitals.js":"2","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\App.js":"3","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Board.js":"4","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Node.jsx":"5","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\configureStore.js":"6","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Node.js":"7","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\utils\\nodeHelpers.js":"8","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstras(Basic).js":"9","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Controls.js":"10","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstra.js":"11"},{"size":611,"mtime":1608817456167,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":177,"mtime":1609770166092,"results":"15","hashOfConfig":"13"},{"size":2370,"mtime":1609864838730,"results":"16","hashOfConfig":"13"},{"size":2186,"mtime":1609850655457,"results":"17","hashOfConfig":"13"},{"size":428,"mtime":1609844175785,"results":"18","hashOfConfig":"13"},{"size":2076,"mtime":1609843944955,"results":"19","hashOfConfig":"13"},{"size":1476,"mtime":1608903362354,"results":"20","hashOfConfig":"13"},{"size":2402,"mtime":1609689082947,"results":"21","hashOfConfig":"13"},{"size":505,"mtime":1609828788829,"results":"22","hashOfConfig":"13"},{"size":0,"mtime":1609921553516,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"fakngb",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33","usedDeprecatedRules":"26"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\index.js",[],["51","52"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\reportWebVitals.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\App.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Board.js",["53","54","55","56","57","58","59"],"// This file contains the board and the nodes rendering.\r\n\r\nimport React, { useEffect } from \"react\";\r\nimport \"../styles/Board.scss\";\r\nimport Node from \"./Node\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { Dijkstra, getNodesInShortestPathOrder } from \"../algorithms/Dijkstra\";\r\n\r\nconst Board = () => {\r\n  const dispatch = useDispatch();\r\n\r\n  const {\r\n    grid,\r\n    START_NODE_ROW,\r\n    START_NODE_COL,\r\n    FINISH_NODE_ROW,\r\n    FINISH_NODE_COL,\r\n  } = useSelector((state) => state.nodes);\r\n  const { isMousePressed } = useSelector((state) => state.controls);\r\n\r\n  const animateDijkstra = (visitedNodesInOrder, nodesInShortestPathOrder) => {\r\n    for (let i = 0; i <= visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(nodesInShortestPathOrder);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        document.getElementById(`node-${node.row}-${node.col}`).className =\r\n          \"node node-visited\";\r\n      }, 10 * i);\r\n    }\r\n  };\r\n\r\n  const visualizeDijkstra = () => {\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = Dijkstra(\r\n      grid,\r\n      START_NODE_ROW,\r\n      START_NODE_COL,\r\n      FINISH_NODE_ROW,\r\n      FINISH_NODE_COL\r\n    );\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n    animateDijkstra(visitedNodesInOrder, nodesInShortestPathOrder);\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid\">\r\n      <button onClick={() => visualizeDijkstra()}>\r\n        Visualize Dijkstra's Algorithm\r\n      </button>\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx} className=\"grid-row\">\r\n            {row.map((node, nodeIdx) => {\r\n              const { row, col, isFinish, isStart, isWall } = node;\r\n              return (\r\n                <Node\r\n                  key={nodeIdx}\r\n                  row={row}\r\n                  col={col}\r\n                  // isFinish={isFinish}\r\n                  // isStart={isStart}\r\n                  // isWall={isWall}\r\n                />\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Board;\r\n","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\components\\Node.jsx",["60","61"],"// TODO after implementing the algorithms: Make a local state here with useState and store all the changes to the grid in that local state. We will only dispatch once when user clicks to run the algorithm. We will dispatch the local grid state and push it to the global state then perform the algorithm.\r\n\r\n// Not sure if this will improve performance but we need to see.\r\n\r\n// We shouldn't be able to change the global grid state from the screen.\r\n\r\n// We won't pull anything directly from the global state\r\n\r\n// If it lags even a little bit then we can put a small loading gif till the algorithm starts.\r\n\r\nimport React from \"react\";\r\n\r\nimport \"../styles/Node.scss\";\r\n\r\n// Redux\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\n\r\n// Importing Actions\r\nimport { updateGrid, makeWall, breakWall } from \"../store/Node\";\r\nimport { mousePressed, mouseNotPressed } from \"../store/Controls\";\r\n\r\nconst Node = ({ col, row }) => {\r\n  const dispatch = useDispatch();\r\n\r\n  const { grid } = useSelector((state) => state.nodes);\r\n  const { isMousePressed } = useSelector((state) => state.controls);\r\n\r\n  // Mouse Handling Events\r\n\r\n  const handleMouseDown = (row, col) => {\r\n    dispatch(mousePressed());\r\n    // console.log(row, col);\r\n    dispatch(makeWall({ row, col }));\r\n  };\r\n\r\n  const handleMouseEnter = (row, col) => {\r\n    if (isMousePressed) {\r\n      dispatch(makeWall({ row, col }));\r\n    }\r\n    if (!isMousePressed) {\r\n      // dispatch(mouseNotPressed());\r\n    }\r\n  };\r\n\r\n  const handleMouseUp = () => {\r\n    dispatch(mouseNotPressed());\r\n  };\r\n\r\n  // console.log(grid);\r\n  const singleNode = grid[row][col];\r\n\r\n  // TODO: Refactor this part to rely on the state directly\r\n\r\n  const extraClassName = singleNode.isWall\r\n    ? \"node-wall\"\r\n    : singleNode.isStart\r\n    ? \"node-start\"\r\n    : singleNode.isEnd\r\n    ? \"node-end\"\r\n    : singleNode.isVisited\r\n    ? \"node-visited\"\r\n    : \"\";\r\n  return (\r\n    <div\r\n      id={`node-${row}-${col}`}\r\n      className={`node ${extraClassName}`}\r\n      onMouseDown={() => handleMouseDown(row, col)}\r\n      onMouseEnter={() => handleMouseEnter(row, col)}\r\n      onMouseUp={() => handleMouseUp()}></div>\r\n  );\r\n};\r\n\r\nexport default Node;\r\n","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\configureStore.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Node.js",["62"],"// State management for the grid\r\n\r\n// TODO: Add right click functionality and then figure out dijkstra and implement by tomorrow.\r\n\r\nimport { createSlice } from \"@reduxjs/toolkit\";\r\nimport { combineReducers } from \"redux\";\r\n\r\n// import { useSelector, useDispatch } from \"react-redux\";\r\n\r\nconst createNode = (col, row) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart:\r\n      // row === initialState.START_NODE_ROW &&\r\n      row === 10 && col === 15,\r\n    isEnd: row === 10 && col === 35,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    isWall: false,\r\n    previousNode: null,\r\n  };\r\n};\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 20; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 50; col++) {\r\n      currentRow.push(createNode(col, row));\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\nconst initialGrid = getInitialGrid();\r\n\r\nconst initialState = {\r\n  grid: initialGrid,\r\n  START_NODE_ROW: 10,\r\n  START_NODE_COL: 15,\r\n  FINISH_NODE_ROW: 10,\r\n  FINISH_NODE_COL: 35,\r\n};\r\n\r\n// console.log(initialState.FINISH_NODE_COL);\r\n\r\nconst nodesSlice = createSlice({\r\n  name: \"Nodes\",\r\n  initialState,\r\n  reducers: {\r\n    makeWall: (state, { payload }) => {\r\n      const singleNode = state.grid[payload.row][payload.col];\r\n      // Start and End nodes cannot be converted to walls\r\n      if (!singleNode.isStart && !singleNode.isEnd) {\r\n        singleNode.isWall = true;\r\n      }\r\n    },\r\n    breakWall: (state, { payload }) => {\r\n      const singleNode = state.grid[payload.row][payload.col];\r\n      // Start and End nodes cannot be converted to walls\r\n      if (!singleNode.isStart && !singleNode.isEnd) {\r\n        singleNode.isWall = false;\r\n      }\r\n    },\r\n    // breakWall: (state) => {\r\n    //   state.grid = false;\r\n    // },\r\n    // visitNode: (state, { payload }) => {\r\n    //   // const singleNode = state.grid[payload.row][payload.col];\r\n    //   // console.log(singleNode);\r\n    // },\r\n  },\r\n});\r\n\r\nexport const { makeWall, breakWall } = nodesSlice.actions;\r\n\r\nexport default nodesSlice.reducer;\r\n","C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\utils\\nodeHelpers.js",[],["63","64"],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstras(Basic).js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\store\\Controls.js",[],"C:\\Users\\Devesh\\Documents\\React_Projects\\pathfinding-visualizer-react\\src\\algorithms\\Dijkstra.js",[],{"ruleId":"65","replacedBy":"66"},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":3,"column":17,"nodeType":"71","messageId":"72","endLine":3,"endColumn":26},{"ruleId":"69","severity":1,"message":"73","line":10,"column":9,"nodeType":"71","messageId":"72","endLine":10,"endColumn":17},{"ruleId":"69","severity":1,"message":"74","line":19,"column":11,"nodeType":"71","messageId":"72","endLine":19,"endColumn":25},{"ruleId":"69","severity":1,"message":"75","line":38,"column":11,"nodeType":"71","messageId":"72","endLine":38,"endColumn":20},{"ruleId":"69","severity":1,"message":"76","line":60,"column":33,"nodeType":"71","messageId":"72","endLine":60,"endColumn":41},{"ruleId":"69","severity":1,"message":"77","line":60,"column":43,"nodeType":"71","messageId":"72","endLine":60,"endColumn":50},{"ruleId":"69","severity":1,"message":"78","line":60,"column":52,"nodeType":"71","messageId":"72","endLine":60,"endColumn":58},{"ruleId":"69","severity":1,"message":"79","line":19,"column":10,"nodeType":"71","messageId":"72","endLine":19,"endColumn":20},{"ruleId":"69","severity":1,"message":"80","line":19,"column":32,"nodeType":"71","messageId":"72","endLine":19,"endColumn":41},{"ruleId":"69","severity":1,"message":"81","line":6,"column":10,"nodeType":"71","messageId":"72","endLine":6,"endColumn":25},{"ruleId":"65","replacedBy":"82"},{"ruleId":"67","replacedBy":"83"},"no-native-reassign",["84"],"no-negated-in-lhs",["85"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'dispatch' is assigned a value but never used.","'isMousePressed' is assigned a value but never used.","'startNode' is assigned a value but never used.","'isFinish' is assigned a value but never used.","'isStart' is assigned a value but never used.","'isWall' is assigned a value but never used.","'updateGrid' is defined but never used.","'breakWall' is defined but never used.","'combineReducers' is defined but never used.",["84"],["85"],"no-global-assign","no-unsafe-negation"]